#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –£–ü–î —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º–∏
"""
import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from xml.etree import ElementTree as ET
from src.upd_parser import UPDParser, UPDParsingError

def test_ip_buyer_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è-–ò–ü"""
    
    # XML —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–º –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
    xml_content = '''<?xml version="1.0" encoding="windows-1251"?>
<–§–∞–π–ª –í–µ—Ä—Å–§–æ—Ä–º="5.03">
    <–°–≤–°—á–§–∞–∫—Ç –ù–æ–º–µ—Ä–î–æ–∫="123" –î–∞—Ç–∞–î–æ–∫="01.01.2024"/>
    <–°–≤–ü—Ä–æ–¥>
        <–ò–¥–°–≤>
            <–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="–û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫" –ò–ù–ù–Æ–õ="1234567890" –ö–ü–ü="123456789"/>
        </–ò–¥–°–≤>
    </–°–≤–ü—Ä–æ–¥>
    <–°–≤–ü–æ–∫—É–ø>
        <–ò–¥–°–≤>
            <–°–≤–ò–ü –ò–ù–ù–§–õ="781490187318">
                <–§–ò–û –§–∞–º–∏–ª–∏—è="–ë—Ä–∞–≥–∞—Ä—å" –ò–º—è="–ê–Ω–¥—Ä–µ–π" –û—Ç—á–µ—Å—Ç–≤–æ="–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á"/>
            </–°–≤–ò–ü>
        </–ò–¥–°–≤>
    </–°–≤–ü–æ–∫—É–ø>
</–§–∞–π–ª>'''
    
    try:
        parser = UPDParser()
        tree = ET.fromstring(xml_content)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ)
        seller = parser._parse_seller_info(tree, {})
        print(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.name}, –ò–ù–ù: {seller.inn}, –ö–ü–ü: {seller.kpp}")
        assert seller.inn == "1234567890", f"–û–∂–∏–¥–∞–ª—Å—è –ò–ù–ù 1234567890, –ø–æ–ª—É—á–µ–Ω {seller.inn}"
        assert seller.name == "–û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫", f"–û–∂–∏–¥–∞–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ '–û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫', –ø–æ–ª—É—á–µ–Ω–æ {seller.name}"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ò–ü)
        buyer = parser._parse_buyer_info(tree, {})
        print(f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.name}, –ò–ù–ù: {buyer.inn}, –ö–ü–ü: {buyer.kpp}")
        assert buyer.inn == "781490187318", f"–û–∂–∏–¥–∞–ª—Å—è –ò–ù–ù 781490187318, –ø–æ–ª—É—á–µ–Ω {buyer.inn}"
        assert buyer.name == "–ë—Ä–∞–≥–∞—Ä—å –ê–Ω–¥—Ä–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á", f"–û–∂–∏–¥–∞–ª–æ—Å—å –§–ò–û '–ë—Ä–∞–≥–∞—Ä—å –ê–Ω–¥—Ä–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á', –ø–æ–ª—É—á–µ–Ω–æ {buyer.name}"
        assert buyer.kpp is None, f"–î–ª—è –ò–ü –ö–ü–ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None, –ø–æ–ª—É—á–µ–Ω {buyer.kpp}"
        
        print("‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ü –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ü: {e}")
        return False

def test_ip_seller_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞-–ò–ü"""
    
    # XML —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–º –∫–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    xml_content = '''<?xml version="1.0" encoding="windows-1251"?>
<–§–∞–π–ª –í–µ—Ä—Å–§–æ—Ä–º="5.03">
    <–°–≤–°—á–§–∞–∫—Ç –ù–æ–º–µ—Ä–î–æ–∫="456" –î–∞—Ç–∞–î–æ–∫="01.01.2024"/>
    <–°–≤–ü—Ä–æ–¥>
        <–ò–¥–°–≤>
            <–°–≤–ò–ü –ò–ù–ù–§–õ="123456789012">
                <–§–ò–û –§–∞–º–∏–ª–∏—è="–ò–≤–∞–Ω–æ–≤" –ò–º—è="–ò–≤–∞–Ω" –û—Ç—á–µ—Å—Ç–≤–æ="–ò–≤–∞–Ω–æ–≤–∏—á"/>
            </–°–≤–ò–ü>
        </–ò–¥–°–≤>
    </–°–≤–ü—Ä–æ–¥>
    <–°–≤–ü–æ–∫—É–ø>
        <–ò–¥–°–≤>
            <–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="–û–û–û –ü–æ–∫—É–ø–∞—Ç–µ–ª—å" –ò–ù–ù–Æ–õ="9876543210" –ö–ü–ü="987654321"/>
        </–ò–¥–°–≤>
    </–°–≤–ü–æ–∫—É–ø>
</–§–∞–π–ª>'''
    
    try:
        parser = UPDParser()
        tree = ET.fromstring(xml_content)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ò–ü)
        seller = parser._parse_seller_info(tree, {})
        print(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü: {seller.name}, –ò–ù–ù: {seller.inn}, –ö–ü–ü: {seller.kpp}")
        assert seller.inn == "123456789012", f"–û–∂–∏–¥–∞–ª—Å—è –ò–ù–ù 123456789012, –ø–æ–ª—É—á–µ–Ω {seller.inn}"
        assert seller.name == "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", f"–û–∂–∏–¥–∞–ª–æ—Å—å –§–ò–û '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', –ø–æ–ª—É—á–µ–Ω–æ {seller.name}"
        assert seller.kpp is None, f"–î–ª—è –ò–ü –ö–ü–ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None, –ø–æ–ª—É—á–µ–Ω {seller.kpp}"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ)
        buyer = parser._parse_buyer_info(tree, {})
        print(f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer.name}, –ò–ù–ù: {buyer.inn}, –ö–ü–ü: {buyer.kpp}")
        assert buyer.inn == "9876543210", f"–û–∂–∏–¥–∞–ª—Å—è –ò–ù–ù 9876543210, –ø–æ–ª—É—á–µ–Ω {buyer.inn}"
        assert buyer.name == "–û–û–û –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", f"–û–∂–∏–¥–∞–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ '–û–û–û –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', –ø–æ–ª—É—á–µ–Ω–æ {buyer.name}"
        
        print("‚úÖ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ü –∫–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ò–ü: {e}")
        return False

def test_missing_inn_error():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ò–ù–ù"""
    
    # XML –±–µ–∑ –ò–ù–ù
    xml_content = '''<?xml version="1.0" encoding="windows-1251"?>
<–§–∞–π–ª –í–µ—Ä—Å–§–æ—Ä–º="5.03">
    <–°–≤–°—á–§–∞–∫—Ç –ù–æ–º–µ—Ä–î–æ–∫="789" –î–∞—Ç–∞–î–æ–∫="01.01.2024"/>
    <–°–≤–ü—Ä–æ–¥>
        <–ò–¥–°–≤>
            <–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="–û–û–û –ü–æ—Å—Ç–∞–≤—â–∏–∫"/>
        </–ò–¥–°–≤>
    </–°–≤–ü—Ä–æ–¥>
    <–°–≤–ü–æ–∫—É–ø>
        <–ò–¥–°–≤>
            <–°–≤–ò–ü>
                <–§–ò–û –§–∞–º–∏–ª–∏—è="–ü–µ—Ç—Ä–æ–≤" –ò–º—è="–ü–µ—Ç—Ä" –û—Ç—á–µ—Å—Ç–≤–æ="–ü–µ—Ç—Ä–æ–≤–∏—á"/>
            </–°–≤–ò–ü>
        </–ò–¥–°–≤>
    </–°–≤–ü–æ–∫—É–ø>
</–§–∞–π–ª>'''
    
    try:
        parser = UPDParser()
        tree = ET.fromstring(xml_content)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ò–ù–ù–§–õ)
        try:
            buyer = parser._parse_buyer_info(tree, {})
            print(f"‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {buyer.name}, –ò–ù–ù: {buyer.inn}")
            return False
        except UPDParsingError as e:
            print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ò–ù–ù: {e}")
            return True
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return False

def test_counterparty_type_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø–æ –¥–ª–∏–Ω–µ –ò–ù–ù"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from src.moysklad_api import MoySkladAPI
    from src.models import Organization
    
    api = MoySkladAPI()
    
    # –¢–µ—Å—Ç –ò–ü (12 —Ü–∏—Ñ—Ä)
    ip_org = Organization(name="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", inn="123456789012")
    print(f"–ò–ü: –ò–ù–ù {ip_org.inn} (–¥–ª–∏–Ω–∞: {len(ip_org.inn)}) -> {'individual' if len(ip_org.inn) == 12 else 'legal'}")
    
    # –¢–µ—Å—Ç –Æ–õ (10 —Ü–∏—Ñ—Ä)
    legal_org = Organization(name="–û–û–û –¢–µ—Å—Ç", inn="1234567890", kpp="123456789")
    print(f"–Æ–õ: –ò–ù–ù {legal_org.inn} (–¥–ª–∏–Ω–∞: {len(legal_org.inn)}) -> {'individual' if len(legal_org.inn) == 12 else 'legal'}")
    
    print("‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–µ–π...\n")
    
    tests = [
        ("–ü–∞—Ä—Å–∏–Ω–≥ –ò–ü –∫–∞–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", test_ip_buyer_parsing),
        ("–ü–∞—Ä—Å–∏–Ω–≥ –ò–ü –∫–∞–∫ –ø—Ä–æ–¥–∞–≤—Ü–∞", test_ip_seller_parsing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ò–ù–ù", test_missing_inn_error),
        ("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞", test_counterparty_type_detection),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        sys.exit(1)