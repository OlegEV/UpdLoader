"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –∑–∞–∫–∞–∑—ã –∏ —Å—á–µ—Ç–∞
"""
import sys
import os
from datetime import datetime
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from moysklad_api import MoySkladAPI
from customer_invoice_parser import CustomerInvoiceDocument
from models import InvoiceItem, Organization

def test_comment_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.remove()
    logger.add(sys.stdout, level="INFO", format="{time:HH:mm:ss} | {level} | {message}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    seller = Organization(
        name="–û–û–û –¢–µ—Å—Ç –ü—Ä–æ–¥–∞–≤–µ—Ü",
        inn="1234567890",
        kpp="123456789"
    )
    
    buyer = Organization(
        name="–û–û–û –¢–µ—Å—Ç –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", 
        inn="0987654321",
        kpp="987654321"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
    from decimal import Decimal
    items = [
        InvoiceItem(
            line_number=1,
            name="–ü—Ä–æ—Ñ–∏–ª—å –∞–ª—é–º–∏–Ω–∏–µ–≤—ã–π",
            quantity=Decimal("10"),
            price=Decimal("150.50"),
            amount_without_vat=Decimal("1505.00"),
            vat_rate="20%",
            vat_amount=Decimal("301.00"),
            amount_with_vat=Decimal("1806.00"),
            article="PROF-001"
        ),
        InvoiceItem(
            line_number=2,
            name="–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è",
            quantity=Decimal("5"),
            price=Decimal("200.00"),
            amount_without_vat=Decimal("1000.00"),
            vat_rate="20%",
            vat_amount=Decimal("200.00"),
            amount_with_vat=Decimal("1200.00"),
            article="TUBE-002"
        ),
        InvoiceItem(
            line_number=3,
            name="–ë–æ–ª—Ç –∫—Ä–µ–ø–µ–∂–Ω—ã–π",
            quantity=Decimal("100"),
            price=Decimal("5.25"),
            amount_without_vat=Decimal("525.00"),
            vat_rate="20%",
            vat_amount=Decimal("105.00"),
            amount_with_vat=Decimal("630.00"),
            article=""  # –ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞
        )
    ]
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å—á–µ—Ç–∞
    customer_invoice_doc = CustomerInvoiceDocument(
        invoice_number="TEST-001",
        invoice_date=datetime.now(),
        seller=seller,
        buyer=buyer,
        items=items,
        total_sum=Decimal("3636.00")
    )
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
    api = MoySkladAPI()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    logger.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è...")
    comment = api._generate_comment_from_items(customer_invoice_doc)
    
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    logger.info(f"---")
    logger.info(comment)
    logger.info(f"---")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    expected_lines = [
        "PROF-001 - 10",
        "TUBE-002 - 5", 
        "–ë–æ–ª—Ç –∫—Ä–µ–ø–µ–∂–Ω—ã–π - 100"  # –ë–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ
    ]
    
    actual_lines = comment.split('\n')
    
    logger.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É...")
    
    success = True
    for i, expected_line in enumerate(expected_lines):
        if i < len(actual_lines):
            actual_line = actual_lines[i]
            if actual_line == expected_line:
                logger.info(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {i+1}: '{actual_line}' - OK")
            else:
                logger.error(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+1}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{expected_line}', –ø–æ–ª—É—á–µ–Ω–æ '{actual_line}'")
                success = False
        else:
            logger.error(f"‚ùå –°—Ç—Ä–æ–∫–∞ {i+1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            success = False
    
    if len(actual_lines) > len(expected_lines):
        logger.warning(f"‚ö†Ô∏è –õ–∏—à–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {actual_lines[len(expected_lines):]}")
    
    if success:
        logger.info("üéâ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("üí• –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω!")
        return False

if __name__ == "__main__":
    success = test_comment_generation()
    sys.exit(0 if success else 1)