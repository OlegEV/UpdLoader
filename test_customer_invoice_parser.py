#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML —Ñ–∞–π–ª–∞ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
"""
import os
import sys
from xml.etree import ElementTree as ET
from pathlib import Path

def analyze_xml_structure(xml_path: str):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML —Ñ–∞–π–ª–∞"""
    print(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {xml_path}")
    print("=" * 60)
    
    if not os.path.exists(xml_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {xml_path}")
        return
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings = ['windows-1251', 'utf-8', 'cp1251']
        
        for encoding in encodings:
            try:
                print(f"\nüîç –ü—Ä–æ–±—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É: {encoding}")
                
                with open(xml_path, 'r', encoding=encoding) as f:
                    content = f.read()
                
                print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"üìù –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:")
                print(content[:200])
                print("...")
                
                # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(content.strip()) <= 100:
                    print("‚ö†Ô∏è  –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ XML –∑–∞–≥–æ–ª–æ–≤–æ–∫")
                    continue
                
                # –ü–∞—Ä—Å–∏–º XML
                tree = ET.fromstring(content)
                print(f"\n‚úÖ XML —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π {encoding}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                analyze_xml_element(tree, level=0)
                
                return tree
                
            except UnicodeDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ {encoding}: {e}")
                continue
            except ET.ParseError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML —Å {encoding}: {e}")
                continue
            except Exception as e:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å {encoding}: {e}")
                continue
        
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª –Ω–∏ —Å –æ–¥–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
        print("\nüîç –ê–Ω–∞–ª–∏–∑ –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª:")
        with open(xml_path, 'rb') as f:
            binary_content = f.read(500)  # –ü–µ—Ä–≤—ã–µ 500 –±–∞–π—Ç
        
        print(f"üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(xml_path)} –±–∞–π—Ç")
        print(f"üî¢ –ü–µ—Ä–≤—ã–µ 100 –±–∞–π—Ç (hex): {binary_content[:100].hex()}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
        try:
            text_parts = binary_content.decode('windows-1251', errors='ignore')
            print(f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏: {text_parts[:200]}")
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

def analyze_xml_element(element, level=0):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ XML"""
    indent = "  " * level
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ
    tag = element.tag
    attribs = element.attrib
    text = element.text.strip() if element.text else ""
    
    print(f"{indent}üìã –≠–ª–µ–º–µ–Ω—Ç: {tag}")
    
    if attribs:
        print(f"{indent}   üè∑Ô∏è  –ê—Ç—Ä–∏–±—É—Ç—ã: {attribs}")
    
    if text:
        print(f"{indent}   üìù –¢–µ–∫—Å—Ç: {text[:100]}{'...' if len(text) > 100 else ''}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    children = list(element)
    if children:
        print(f"{indent}   üë∂ –î–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(children)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        for i, child in enumerate(children[:5]):
            if level < 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É
                analyze_xml_element(child, level + 1)
            else:
                print(f"{indent}    üìã {child.tag} (–∞—Ç—Ä–∏–±—É—Ç—ã: {len(child.attrib)}, —Ç–µ–∫—Å—Ç: {'–µ—Å—Ç—å' if child.text and child.text.strip() else '–Ω–µ—Ç'})")
        
        if len(children) > 5:
            print(f"{indent}    ... –∏ –µ—â–µ {len(children) - 5} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

def test_card_xml():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ card.xml –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    card_path = "Sample/Account/1/card.xml"
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CARD.XML")
    print("=" * 60)
    
    analyze_xml_structure(card_path)

def test_main_invoice_xml():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ XML —Ñ–∞–π–ª–∞ —Å—á–µ—Ç–∞"""
    invoice_path = "Sample/Account/1/Schet na oplatu 239 27.06.2025 (30.06.2025 101328).xml"
    print("\n\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–û–ì–û XML –§–ê–ô–õ–ê –°–ß–ï–¢–ê")
    print("=" * 60)
    
    analyze_xml_structure(invoice_path)

def extract_invoice_data_from_card(card_path: str):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞ –∏–∑ card.xml"""
    print("\n\nüìä –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó CARD.XML")
    print("=" * 60)
    
    try:
        with open(card_path, 'r', encoding='windows-1251') as f:
            content = f.read()
        
        tree = ET.fromstring(content)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {}
        
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        identifiers = tree.find(".//{http://api-invoice.taxcom.ru/card}Identifiers")
        if identifiers is not None:
            data['external_identifier'] = identifiers.get("ExternalIdentifier")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞)
        description = tree.find(".//{http://api-invoice.taxcom.ru/card}Description")
        if description is not None:
            data['title'] = description.get("Title")
            data['date'] = description.get("Date")
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
        sender = tree.find(".//{http://api-invoice.taxcom.ru/card}Sender")
        if sender is not None:
            abonent = sender.find(".//{http://api-invoice.taxcom.ru/card}Abonent")
            if abonent is not None:
                data['sender_name'] = abonent.get("Name")
                data['sender_inn'] = abonent.get("Inn")
                data['sender_kpp'] = abonent.get("Kpp")
        
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        for key, value in data.items():
            print(f"   {key}: {value}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = data.get('title', '')
        if title:
            import re
            # –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            numbers = re.findall(r'\d+', title)
            if numbers:
                print(f"\nüî¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏: {numbers}")
                print(f"   –í–æ–∑–º–æ–∂–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: {numbers[0]}")
        
        return data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

if __name__ == "__main__":
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê –°–ß–ï–¢–û–í –ü–û–ö–£–ü–ê–¢–ï–õ–Æ")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    card_path = "Sample/Account/1/card.xml"
    invoice_path = "Sample/Account/1/Schet na oplatu 239 27.06.2025 (30.06.2025 101328).xml"
    
    if not os.path.exists(card_path):
        print(f"‚ùå –§–∞–π–ª card.xml –Ω–µ –Ω–∞–π–¥–µ–Ω: {card_path}")
        sys.exit(1)
    
    if not os.path.exists(invoice_path):
        print(f"‚ùå –§–∞–π–ª —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {invoice_path}")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    test_card_xml()
    test_main_invoice_xml()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    extract_invoice_data_from_card(card_path)
    
    print("\n\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")