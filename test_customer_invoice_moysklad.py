#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞ —Å—á–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å –ú–æ–π–°–∫–ª–∞–¥ API
"""
import os
import sys
import tempfile
import zipfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.customer_invoice_parser import CustomerInvoiceParser
from src.moysklad_api import MoySkladAPI, MoySkladAPIError
from loguru import logger

def create_test_archive():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ Sample/Account"""
    sample_dir = Path("Sample/Account")
    
    if not sample_dir.exists():
        raise FileNotFoundError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Sample/Account –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª
    temp_zip = tempfile.NamedTemporaryFile(suffix='.zip', delete=False)
    temp_zip.close()
    
    with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–±–∞–≤–ª—è–µ–º meta.xml
        meta_file = sample_dir / "meta.xml"
        if meta_file.exists():
            zipf.write(meta_file, "meta.xml")
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: meta.xml")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ 1
        subdir = sample_dir / "1"
        if subdir.exists():
            # –î–æ–±–∞–≤–ª—è–µ–º card.xml
            card_file = subdir / "card.xml"
            if card_file.exists():
                zipf.write(card_file, "1/card.xml")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: 1/card.xml")
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π XML —Ñ–∞–π–ª —Å—á–µ—Ç–∞
            for xml_file in subdir.glob("*.xml"):
                if xml_file.name != "card.xml":
                    zipf.write(xml_file, f"1/{xml_file.name}")
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: –æ—Å–Ω–æ–≤–Ω–æ–π XML —Ñ–∞–π–ª —Å—á–µ—Ç–∞")
                    break
    
    print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {temp_zip.name}")
    return temp_zip.name

def test_customer_invoice_integration():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ß–ï–¢–û–í –ü–û–ö–£–ü–ê–¢–ï–õ–Æ –° –ú–û–ô–°–ö–õ–ê–î")
    print("=" * 60)
    
    try:
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤
        print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞...")
        archive_path = create_test_archive()
        
        # –®–∞–≥ 2: –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        print("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        parser = CustomerInvoiceParser()
        customer_invoice_doc = parser.parse_customer_invoice_archive(archive_path)
        
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω:")
        print(f"   –ù–æ–º–µ—Ä: {customer_invoice_doc.invoice_number}")
        print(f"   –î–∞—Ç–∞: {customer_invoice_doc.invoice_date.strftime('%d.%m.%Y')}")
        print(f"   –°—É–º–º–∞: {customer_invoice_doc.total_sum:,.2f} ‚ÇΩ")
        print(f"   –ü–æ–∑–∏—Ü–∏–π: {len(customer_invoice_doc.items)}")
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ú–æ–π–°–∫–ª–∞–¥ API
        print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ú–æ–π–°–∫–ª–∞–¥ API...")
        api = MoySkladAPI()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not api.verify_token():
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ API")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–µ
        access_info = api.verify_api_access()
        if not access_info["success"]:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API: {access_info['error']}")
            return False
        
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ú–æ–π–°–∫–ª–∞–¥ API –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        print(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {access_info['organization']['name']}")
        print(f"   –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {access_info['employee']['name']}")
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ú–æ–π–°–∫–ª–∞–¥ (–≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
        print("\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ú–æ–π–°–∫–ª–∞–¥...")
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ú–æ–π–°–∫–ª–∞–¥!")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤? (y/N): ").strip().lower()
        if confirmation != 'y':
            print("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
        
        try:
            result = api.create_customer_order_and_invoice(customer_invoice_doc)
            
            if result["success"]:
                print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ –ú–æ–π–°–∫–ª–∞–¥!")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
                customer_order = result["customer_order"]
                order_url = api.get_customer_order_url(customer_order["id"])
                print(f"\nüìã –ó–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
                print(f"   ID: {customer_order['id']}")
                print(f"   –ù–æ–º–µ—Ä: {customer_order['name']}")
                print(f"   URL: {order_url}")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
                customer_invoice = result["customer_invoice"]
                invoice_url = api.get_customer_invoice_url(customer_invoice["id"])
                print(f"\nüí∞ –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:")
                print(f"   ID: {customer_invoice['id']}")
                print(f"   –ù–æ–º–µ—Ä: {customer_invoice['name']}")
                print(f"   URL: {invoice_url}")
                
                print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
                print(f"‚úÖ –ó–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω: –ü{customer_invoice_doc.invoice_number}")
                print(f"‚úÖ –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–Ω: {customer_invoice_doc.invoice_number}")
                print(f"‚úÖ –¢–æ–≤–∞—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ —Å–∫–ª–∞–¥–∞–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º —Å–æ–≥–ª–∞—Å–Ω–æ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–µ")
                
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                return False
                
        except MoySkladAPIError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ú–æ–π–°–∫–ª–∞–¥ API: {e}")
            print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –¢–æ–≤–∞—Ä—ã –∏–∑ —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ú–æ–π–°–∫–ª–∞–¥")
            print("   ‚Ä¢ –°–∫–ª–∞–¥—ã '–ì–∞—Ç—á–∏–Ω–∞' –∏–ª–∏ '–°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫ –ü–ü' –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            print("   ‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã '–ü—Ä–æ—Ñ–∏–ª–∏' –∏–ª–∏ '–¢—Ä—É–±—ã' –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
            print("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            return False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            if 'archive_path' in locals():
                os.unlink(archive_path)
                print(f"\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ —É–¥–∞–ª–µ–Ω")
        except:
            pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = test_customer_invoice_integration()
        
        if success:
            print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å—á–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å –ú–æ–π–°–∫–ª–∞–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("\nüí• –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò!")
            print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏.")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()