#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ Telegram –±–æ—Ç–µ
"""
import os
import sys
import tempfile
import zipfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.telegram_bot import TelegramUPDBot

def create_customer_invoice_test_archive():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"""
    sample_dir = Path("Sample/Account")
    
    if not sample_dir.exists():
        raise FileNotFoundError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Sample/Account –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª
    temp_zip = tempfile.NamedTemporaryFile(suffix='.zip', delete=False)
    temp_zip.close()
    
    with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–±–∞–≤–ª—è–µ–º meta.xml
        meta_file = sample_dir / "meta.xml"
        if meta_file.exists():
            zipf.write(meta_file, "meta.xml")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ 1
        subdir = sample_dir / "1"
        if subdir.exists():
            # –î–æ–±–∞–≤–ª—è–µ–º card.xml
            card_file = subdir / "card.xml"
            if card_file.exists():
                zipf.write(card_file, "1/card.xml")
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π XML —Ñ–∞–π–ª —Å—á–µ—Ç–∞
            for xml_file in subdir.glob("*.xml"):
                if xml_file.name != "card.xml":
                    zipf.write(xml_file, f"1/{xml_file.name}")
                    break
    
    return temp_zip.name

def create_upd_test_archive():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –£–ü–î"""
    sample_dir = Path("Sample/–ò–ü")
    
    if not sample_dir.exists():
        raise FileNotFoundError("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Sample/–ò–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª
    temp_zip = tempfile.NamedTemporaryFile(suffix='.zip', delete=False)
    temp_zip.close()
    
    with zipfile.ZipFile(temp_zip.name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # –î–æ–±–∞–≤–ª—è–µ–º meta.xml
        meta_file = sample_dir / "meta.xml"
        if meta_file.exists():
            zipf.write(meta_file, "meta.xml")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ 1
        subdir = sample_dir / "1"
        if subdir.exists():
            # –î–æ–±–∞–≤–ª—è–µ–º card.xml
            card_file = subdir / "card.xml"
            if card_file.exists():
                zipf.write(card_file, "1/card.xml")
            
            # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π XML —Ñ–∞–π–ª –£–ü–î
            for xml_file in subdir.glob("*.xml"):
                if xml_file.name != "card.xml":
                    zipf.write(xml_file, f"1/{xml_file.name}")
                    break
    
    return temp_zip.name

def test_document_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print("üß™ –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–ê –î–û–ö–£–ú–ï–ù–¢–ê")
    print("=" * 50)
    
    bot = TelegramUPDBot()
    
    try:
        # –¢–µ—Å—Ç 1: –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        print("\nüìã –¢–µ—Å—Ç 1: –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é (CommerceML)")
        customer_invoice_archive = create_customer_invoice_test_archive()
        
        document_type = bot._detect_document_type(customer_invoice_archive)
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: {document_type}")
        
        if document_type == "customer_invoice":
            print("‚úÖ –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é")
        
        # –¢–µ—Å—Ç 2: –£–ü–î
        print("\nüìÑ –¢–µ—Å—Ç 2: –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç")
        upd_archive = create_upd_test_archive()
        
        document_type = bot._detect_document_type(upd_archive)
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: {document_type}")
        
        if document_type == "upd":
            print("‚úÖ –£–ü–î –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –£–ü–î")
        
        print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            if 'customer_invoice_archive' in locals():
                os.unlink(customer_invoice_archive)
            if 'upd_archive' in locals():
                os.unlink(upd_archive)
        except:
            pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = test_document_detection()
        
        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –æ–±–æ–∏–º–∏ —Ç–∏–ø–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        else:
            print("\nüí• –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –° –û–®–ò–ë–ö–ê–ú–ò!")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()