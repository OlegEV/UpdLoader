"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å—á–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CommerceML
"""
import os
import tempfile
from typing import Optional, Dict

from loguru import logger

from src.config import Config
from src.models import ProcessingResult
from src.customer_invoice_parser import CustomerInvoiceParser, CustomerInvoiceParsingError, CustomerInvoiceDocument
from src.moysklad_api import MoySkladAPI, MoySkladAPIError


class CustomerInvoiceProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"""
    
    def __init__(self):
        self.parser = CustomerInvoiceParser()
        self.moysklad_api = MoySkladAPI()
    
    def process_customer_invoice_file(self, file_content: bytes, filename: str) -> ProcessingResult:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ZIP —Ñ–∞–π–ª–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            ProcessingResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        temp_zip_path = None
        
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if len(file_content) > Config.MAX_FILE_SIZE:
                return ProcessingResult(
                    success=False,
                    message=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024} –ú–ë",
                    error_code="FILE_TOO_LARGE"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not filename.lower().endswith('.zip'):
                return ProcessingResult(
                    success=False,
                    message="‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ZIP –∞—Ä—Ö–∏–≤—ã —Å–æ —Å—á–µ—Ç–∞–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é",
                    error_code="INVALID_FILE_TYPE"
                )
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            Config.ensure_temp_dir()
            temp_zip_path = self._save_temp_file(file_content, filename)
            
            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            customer_invoice_doc = self._parse_customer_invoice(temp_zip_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ú–æ–π–°–∫–ª–∞–¥
            moysklad_result = self._upload_to_moysklad(customer_invoice_doc)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return self._create_success_result(customer_invoice_doc, moysklad_result)
            
        except CustomerInvoiceParsingError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")
            return ProcessingResult(
                success=False,
                message=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é:\n{str(e)}",
                error_code="PARSING_ERROR"
            )
            
        except MoySkladAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ú–æ–π–°–∫–ª–∞–¥ API: {e}")
            return ProcessingResult(
                success=False,
                message=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥:\n{str(e)}",
                error_code="MOYSKLAD_API_ERROR"
            )
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")
            return ProcessingResult(
                success=False,
                message=f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}",
                error_code="UNEXPECTED_ERROR"
            )
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if temp_zip_path:
                self._cleanup_temp_files(temp_zip_path)
    
    def _save_temp_file(self, file_content: bytes, filename: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        temp_file = tempfile.NamedTemporaryFile(
            dir=Config.TEMP_DIR,
            suffix='.zip',
            delete=False
        )
        
        try:
            temp_file.write(file_content)
            temp_file.flush()
            logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")
            return temp_file.name
        finally:
            temp_file.close()
    
    def _parse_customer_invoice(self, zip_path: str) -> CustomerInvoiceDocument:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"""
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é...")
        return self.parser.parse_customer_invoice_archive(zip_path)
    
    def _upload_to_moysklad(self, customer_invoice_doc: CustomerInvoiceDocument) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —Å—á–µ—Ç–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not self.moysklad_api.verify_token():
            raise MoySkladAPIError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ API")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ —Å—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
        return self.moysklad_api.create_customer_order_and_invoice(customer_invoice_doc)
    
    def _create_success_result(self, customer_invoice_doc: CustomerInvoiceDocument, moysklad_result: dict) -> ProcessingResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        customer_order = moysklad_result.get('customer_order', {})
        customer_invoice = moysklad_result.get('customer_invoice', {})
        
        order_id = customer_order.get('id')
        order_name = customer_order.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        invoice_id = customer_invoice.get('id')
        invoice_name = customer_invoice.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        order_url = None
        invoice_url = None
        if order_id:
            order_url = self.moysklad_api.get_customer_order_url(order_id)
        if invoice_id:
            invoice_url = self.moysklad_api.get_customer_invoice_url(invoice_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_success_message(customer_invoice_doc, order_name, order_url, invoice_name, invoice_url)
        
        return ProcessingResult(
            success=True,
            message=message,
            moysklad_invoice_id=invoice_id,
            moysklad_invoice_url=invoice_url
        )
    
    def _format_success_message(self, customer_invoice_doc: CustomerInvoiceDocument, 
                               order_name: str, order_url: Optional[str],
                               invoice_name: str, invoice_url: Optional[str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        message = "‚úÖ –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ú–æ–π–°–∫–ª–∞–¥!\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        message += f"üìã –ó–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {order_name}\n"
        message += f"üí∞ –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {invoice_name}\n"
        message += f"üìÖ –î–∞—Ç–∞: {customer_invoice_doc.invoice_date.strftime('%d.%m.%Y')}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        message += f"üè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: {customer_invoice_doc.seller.name}"
        if customer_invoice_doc.seller.inn:
            message += f" (–ò–ù–ù: {customer_invoice_doc.seller.inn})"
        message += "\n"
        
        message += f"üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {customer_invoice_doc.buyer.name}"
        if customer_invoice_doc.buyer.inn:
            message += f" (–ò–ù–ù: {customer_invoice_doc.buyer.inn})"
        message += "\n\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message += f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {customer_invoice_doc.total_sum:,.2f} ‚ÇΩ\n"
        message += f"üì¶ –¢–æ–≤–∞—Ä–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(customer_invoice_doc.items)}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ –∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏
        message += "üéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤:\n"
        for item in customer_invoice_doc.items:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–∞
            product_group = self._determine_product_group(item.name, item.article)
            warehouse_name, project_name = self._get_warehouse_and_project_for_group(product_group)
            
            message += f"‚Ä¢ {item.name}"
            if item.article:
                message += f" (–∞—Ä—Ç. {item.article})"
            message += f"\n  ‚îî –ì—Ä—É–ø–ø–∞: {product_group} ‚Üí –°–∫–ª–∞–¥: {warehouse_name}, –ü—Ä–æ–µ–∫—Ç: {project_name}\n"
        
        message += "\n"
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        message += "üîó –°—Å—ã–ª–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥:\n"
        if order_url:
            message += f"‚Ä¢ –ó–∞–∫–∞–∑ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {order_url}\n"
        if invoice_url:
            message += f"‚Ä¢ –°—á–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {invoice_url}\n"
        
        return message
    
    def _determine_product_group(self, product_name: str, product_article: Optional[str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏–∫—É–ª—É"""
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
        name_lower = product_name.lower() if product_name else ""
        article_lower = product_article.lower() if product_article else ""
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "—Ç—Ä—É–±—ã"
        tube_keywords = ["—Ç—Ä—É–±–∞", "—Ç—Ä—É–±—ã", "—Ç—Ä—É–±–∫–∞", "—Ç—Ä—É–±–Ω—ã–π", "—Ç—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥"]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã "–ø—Ä–æ—Ñ–∏–ª—å"
        profile_keywords = ["–ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ–∏–ª–∏", "–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π", "–ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        for keyword in tube_keywords:
            if keyword in name_lower:
                return "—Ç—Ä—É–±—ã"
        
        for keyword in profile_keywords:
            if keyword in name_lower:
                return "–ø—Ä–æ—Ñ–∏–ª—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª
        for keyword in tube_keywords:
            if keyword in article_lower:
                return "—Ç—Ä—É–±—ã"
        
        for keyword in profile_keywords:
            if keyword in article_lower:
                return "–ø—Ä–æ—Ñ–∏–ª—å"
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–ø—Ä–æ—Ñ–∏–ª—å"
        return "–ø—Ä–æ—Ñ–∏–ª—å"
    
    def _get_warehouse_and_project_for_group(self, product_group: str) -> tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–∞"""
        if product_group == "—Ç—Ä—É–±—ã":
            return "–°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫ –ü–ü", "–¢—Ä—É–±—ã"
        elif product_group == "–ø—Ä–æ—Ñ–∏–ª—å":
            return "–ì–∞—Ç—á–∏–Ω–∞", "–ü—Ä–æ—Ñ–∏–ª–∏"
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return "–ì–∞—Ç—á–∏–Ω–∞", "–ü—Ä–æ—Ñ–∏–ª–∏"
    
    def _cleanup_temp_files(self, zip_path: str):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            self.parser.cleanup_temp_files(zip_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def check_moysklad_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥"""
        try:
            return self.moysklad_api.verify_token()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥: {e}")
            return False
    
    def get_moysklad_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ú–æ–π–°–∫–ª–∞–¥ API"""
        try:
            return self.moysklad_api.verify_api_access()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ú–æ–π–°–∫–ª–∞–¥: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"
            }