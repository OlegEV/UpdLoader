"""
–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import os
import tempfile
from typing import Optional, Dict

from loguru import logger

from .config import Config
from .models import ProcessingResult, UPDDocument
from .upd_parser import UPDParser, UPDParsingError
from .moysklad_api import MoySkladAPI, MoySkladAPIError


class UPDProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.parser = UPDParser()
        self.moysklad_api = MoySkladAPI()
    
    def process_upd_file(self, file_content: bytes, filename: str) -> ProcessingResult:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –£–ü–î —Ñ–∞–π–ª–∞
        
        Args:
            file_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ ZIP —Ñ–∞–π–ª–∞
            filename: –ò–º—è —Ñ–∞–π–ª–∞
            
        Returns:
            ProcessingResult: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        temp_zip_path = None
        
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –£–ü–î —Ñ–∞–π–ª–∞: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if len(file_content) > Config.MAX_FILE_SIZE:
                return ProcessingResult(
                    success=False,
                    message=f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {Config.MAX_FILE_SIZE // 1024 // 1024} –ú–ë",
                    error_code="FILE_TOO_LARGE"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not filename.lower().endswith('.zip'):
                return ProcessingResult(
                    success=False,
                    message="‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ ZIP –∞—Ä—Ö–∏–≤—ã —Å –£–ü–î",
                    error_code="INVALID_FILE_TYPE"
                )
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            Config.ensure_temp_dir()
            temp_zip_path = self._save_temp_file(file_content, filename)
            
            # –ü–∞—Ä—Å–∏–º –£–ü–î
            upd_document = self._parse_upd(temp_zip_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ú–æ–π–°–∫–ª–∞–¥
            invoice_result = self._upload_to_moysklad(upd_document)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return self._create_success_result(upd_document, invoice_result)
            
        except UPDParsingError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –£–ü–î: {e}")
            return ProcessingResult(
                success=False,
                message=f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –£–ü–î:\n{str(e)}",
                error_code="PARSING_ERROR"
            )
            
        except MoySkladAPIError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ú–æ–π–°–∫–ª–∞–¥ API: {e}")
            return ProcessingResult(
                success=False,
                message=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥:\n{str(e)}",
                error_code="MOYSKLAD_API_ERROR"
            )
            
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –£–ü–î: {e}")
            return ProcessingResult(
                success=False,
                message=f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n{str(e)}",
                error_code="UNEXPECTED_ERROR"
            )
            
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if temp_zip_path:
                self._cleanup_temp_files(temp_zip_path)
    
    def _save_temp_file(self, file_content: bytes, filename: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        temp_file = tempfile.NamedTemporaryFile(
            dir=Config.TEMP_DIR,
            suffix='.zip',
            delete=False
        )
        
        try:
            temp_file.write(file_content)
            temp_file.flush()
            logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_file.name}")
            return temp_file.name
        finally:
            temp_file.close()
    
    def _parse_upd(self, zip_path: str) -> UPDDocument:
        """–ü–∞—Ä—Å–∏–Ω–≥ –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        logger.info("–ü–∞—Ä—Å–∏–Ω–≥ –£–ü–î –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        return self.parser.parse_upd_archive(zip_path)
    
    def _upload_to_moysklad(self, upd_document: UPDDocument) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥"""
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ú–æ–π–°–∫–ª–∞–¥...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if not self.moysklad_api.verify_token():
            raise MoySkladAPIError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ú–æ–π–°–∫–ª–∞–¥ API")
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä—É
        return self.moysklad_api.create_invoice_from_upd(upd_document)
    
    def _create_success_result(self, upd_document: UPDDocument, invoice_result: dict) -> ProcessingResult:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç factureout –∏ demand
        factureout = invoice_result.get('factureout', {})
        demand = invoice_result.get('demand', {})
        
        invoice_id = factureout.get('id')
        invoice_name = factureout.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        demand_id = demand.get('id')
        demand_name = demand.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        invoice_url = None
        demand_url = None
        if invoice_id:
            invoice_url = self.moysklad_api.get_invoice_url(invoice_id)
        if demand_id:
            demand_url = self.moysklad_api.get_demand_url(demand_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._format_success_message(upd_document, invoice_name, invoice_url, demand_name, demand_url, invoice_result)
        
        return ProcessingResult(
            success=True,
            message=message,
            upd_document=upd_document,
            moysklad_invoice_id=invoice_id,
            moysklad_invoice_url=invoice_url
        )
    
    def _format_success_message(self, upd_document: UPDDocument, invoice_name: str,
                               invoice_url: Optional[str], demand_name: str,
                               demand_url: Optional[str], invoice_result: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ"""
        content = upd_document.content
        
        message = "‚úÖ –£–ü–î —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ú–æ–π–°–∫–ª–∞–¥!\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
        message += f"üìÑ –°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞: {invoice_name}\n"
        message += f"üì¶ –û—Ç–≥—Ä—É–∑–∫–∞: {demand_name}\n"
        message += f" –î–∞—Ç–∞: {content.invoice_date.strftime('%d.%m.%Y')}\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö
        message += f"üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {content.seller.name}"
        if content.seller.inn:
            message += f" (–ò–ù–ù: {content.seller.inn})"
        message += "\n"
        
        message += f"üè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {content.buyer.name}"
        if content.buyer.inn:
            message += f" (–ò–ù–ù: {content.buyer.inn})"
        message += "\n\n"
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if content.total_with_vat > 0:
            message += f"üí∞ –°—É–º–º–∞ –±–µ–∑ –ù–î–°: {content.total_without_vat:,.2f} ‚ÇΩ\n"
            message += f"üßæ –ù–î–°: {content.total_vat:,.2f} ‚ÇΩ\n"
            message += f"üíµ –ò—Ç–æ–≥–æ —Å –ù–î–°: {content.total_with_vat:,.2f} ‚ÇΩ\n\n"
        
        # –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        message += "üîó –°—Å—ã–ª–∫–∏ –≤ –ú–æ–π–°–∫–ª–∞–¥:\n"
        if invoice_url:
            message += f"‚Ä¢ –°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞: {invoice_url}\n"
        if demand_url:
            message += f"‚Ä¢ –û—Ç–≥—Ä—É–∑–∫–∞: {demand_url}\n"
        
        if upd_document.meta_info.doc_flow_id:
            message += f"\nüÜî ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞: {upd_document.meta_info.doc_flow_id}"
        
        return message
    
    def _cleanup_temp_files(self, zip_path: str):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            self.parser.cleanup_temp_files(zip_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    def check_moysklad_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥"""
        try:
            return self.moysklad_api.verify_token()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ú–æ–π–°–∫–ª–∞–¥: {e}")
            return False
    
    def get_moysklad_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ú–æ–π–°–∫–ª–∞–¥ API"""
        try:
            return self.moysklad_api.verify_api_access()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ú–æ–π–°–∫–ª–∞–¥: {e}")
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}",
                "details": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API"
            }