#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã XML —Ñ–∞–π–ª–∞ —Å—á–µ—Ç–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ CommerceML
"""
import os
from xml.etree import ElementTree as ET
from datetime import datetime

def analyze_commerceml_invoice():
    """–ê–Ω–∞–ª–∏–∑ —Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CommerceML"""
    invoice_path = "Sample/Account/1/Schet na oplatu 239 27.06.2025 (30.06.2025 101328).xml"
    
    print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ß–ï–¢–ê –í –§–û–†–ú–ê–¢–ï COMMERCEML")
    print("=" * 70)
    
    try:
        with open(invoice_path, 'r', encoding='windows-1251') as f:
            content = f.read()
        
        tree = ET.fromstring(content)
        
        # Namespace –¥–ª—è CommerceML
        ns = {'cm': 'urn:1C.ru:commerceml_2'}
        
        print("üìã –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–ö–£–ú–ï–ù–¢–ï:")
        print("-" * 40)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc = tree.find('.//cm:–î–æ–∫—É–º–µ–Ω—Ç', ns)
        if doc is not None:
            doc_id = doc.find('cm:–ò–¥', ns)
            doc_number = doc.find('cm:–ù–æ–º–µ—Ä', ns)
            doc_date = doc.find('cm:–î–∞—Ç–∞', ns)
            doc_operation = doc.find('cm:–•–æ–∑–û–ø–µ—Ä–∞—Ü–∏—è', ns)
            doc_role = doc.find('cm:–†–æ–ª—å', ns)
            doc_currency = doc.find('cm:–í–∞–ª—é—Ç–∞', ns)
            doc_rate = doc.find('cm:–ö—É—Ä—Å', ns)
            doc_sum = doc.find('cm:–°—É–º–º–∞', ns)
            doc_comment = doc.find('cm:–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', ns)
            
            print(f"ID: {doc_id.text if doc_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"–ù–æ–º–µ—Ä: {doc_number.text if doc_number is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"–î–∞—Ç–∞: {doc_date.text if doc_date is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"–û–ø–µ—Ä–∞—Ü–∏—è: {doc_operation.text if doc_operation is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"–†–æ–ª—å: {doc_role.text if doc_role is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"–í–∞–ª—é—Ç–∞: {doc_currency.text if doc_currency is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"–ö—É—Ä—Å: {doc_rate.text if doc_rate is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"–°—É–º–º–∞: {doc_sum.text if doc_sum is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {doc_comment.text if doc_comment is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
        
        print("\nüë• –ö–û–ù–¢–†–ê–ì–ï–ù–¢–´:")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
        contractors = doc.findall('.//cm:–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', ns)
        for i, contractor in enumerate(contractors, 1):
            print(f"\n–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç {i}:")
            
            contractor_id = contractor.find('cm:–ò–¥', ns)
            contractor_name = contractor.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
            contractor_full_name = contractor.find('cm:–ü–æ–ª–Ω–æ–µ–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
            contractor_role = contractor.find('cm:–†–æ–ª—å', ns)
            
            print(f"  ID: {contractor_id.text if contractor_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"  –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {contractor_name.text if contractor_name is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"  –ü–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {contractor_full_name.text if contractor_full_name is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"  –†–æ–ª—å: {contractor_role.text if contractor_role is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
            
            # –†–µ–∫–≤–∏–∑–∏—Ç—ã
            requisites = contractor.find('cm:–†–µ–∫–≤–∏–∑–∏—Ç—ã', ns)
            if requisites is not None:
                print("  –†–µ–∫–≤–∏–∑–∏—Ç—ã:")
                for req in requisites:
                    req_name = req.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
                    req_value = req.find('cm:–ó–Ω–∞—á–µ–Ω–∏–µ', ns)
                    if req_name is not None and req_value is not None:
                        print(f"    {req_name.text}: {req_value.text}")
            
            # –ê–¥—Ä–µ—Å
            address = contractor.find('cm:–ê–¥—Ä–µ—Å–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', ns)
            if address is not None:
                print("  –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
                for addr_elem in address:
                    if addr_elem.text:
                        print(f"    {addr_elem.tag.split('}')[-1]}: {addr_elem.text}")
        
        print("\nüì¶ –¢–û–í–ê–†–´ –ò –£–°–õ–£–ì–ò:")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
        products = doc.findall('.//cm:–¢–æ–≤–∞—Ä', ns)
        for i, product in enumerate(products, 1):
            print(f"\n–¢–æ–≤–∞—Ä {i}:")
            
            product_id = product.find('cm:–ò–¥', ns)
            product_name = product.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
            product_article = product.find('cm:–ê—Ä—Ç–∏–∫—É–ª', ns)
            
            print(f"  ID: {product_id.text if product_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"  –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {product_name.text if product_name is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
            print(f"  –ê—Ä—Ç–∏–∫—É–ª: {product_article.text if product_article is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            
            # –ë–∞–∑–æ–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞
            base_unit = product.find('cm:–ë–∞–∑–æ–≤—ã–µ–ï–¥–∏–Ω–∏—Ü—ã', ns)
            if base_unit is not None:
                unit_code = base_unit.get('–ö–æ–¥')
                unit_name = base_unit.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–ü–æ–ª–Ω–æ–µ')
                print(f"  –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {unit_name} (–∫–æ–¥: {unit_code})")
            
            # –†–µ–∫–≤–∏–∑–∏—Ç—ã —Ç–æ–≤–∞—Ä–∞
            product_requisites = product.find('cm:–ó–Ω–∞—á–µ–Ω–∏—è–†–µ–∫–≤–∏–∑–∏—Ç–æ–≤', ns)
            if product_requisites is not None:
                print("  –†–µ–∫–≤–∏–∑–∏—Ç—ã —Ç–æ–≤–∞—Ä–∞:")
                for req in product_requisites.findall('cm:–ó–Ω–∞—á–µ–Ω–∏–µ–†–µ–∫–≤–∏–∑–∏—Ç–∞', ns):
                    req_name = req.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
                    req_value = req.find('cm:–ó–Ω–∞—á–µ–Ω–∏–µ', ns)
                    if req_name is not None and req_value is not None:
                        print(f"    {req_name.text}: {req_value.text}")
            
            # –¶–µ–Ω—ã
            prices = product.find('cm:–¶–µ–Ω—ã', ns)
            if prices is not None:
                print("  –¶–µ–Ω—ã:")
                for price in prices.findall('cm:–¶–µ–Ω–∞', ns):
                    price_id = price.find('cm:–ò–¥–¢–∏–ø–∞–¶–µ–Ω—ã', ns)
                    price_value = price.find('cm:–¶–µ–Ω–∞–ó–∞–ï–¥–∏–Ω–∏—Ü—É', ns)
                    price_currency = price.find('cm:–í–∞–ª—é—Ç–∞', ns)
                    price_unit = price.find('cm:–ï–¥–∏–Ω–∏—Ü–∞', ns)
                    
                    print(f"    –¢–∏–ø —Ü–µ–Ω—ã: {price_id.text if price_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                    print(f"    –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {price_value.text if price_value is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                    print(f"    –í–∞–ª—é—Ç–∞: {price_currency.text if price_currency is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                    print(f"    –ï–¥–∏–Ω–∏—Ü–∞: {price_unit.text if price_unit is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
        
        print("\nüìä –¢–ê–ë–õ–ò–ß–ù–ê–Ø –ß–ê–°–¢–¨:")
        print("-" * 40)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—á–Ω—É—é —á–∞—Å—Ç—å
        table_part = doc.find('cm:–¢–∞–±–ª–∏—á–Ω–∞—è–ß–∞—Å—Ç—å', ns)
        if table_part is not None:
            rows = table_part.findall('cm:–°—Ç—Ä–æ–∫–∞–¢–∞–±–ª–∏—á–Ω–æ–π–ß–∞—Å—Ç–∏', ns)
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(rows)}")
            
            for i, row in enumerate(rows, 1):
                print(f"\n–°—Ç—Ä–æ–∫–∞ {i}:")
                
                row_id = row.find('cm:–ò–¥', ns)
                row_product = row.find('cm:–¢–æ–≤–∞—Ä', ns)
                row_quantity = row.find('cm:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ns)
                row_price = row.find('cm:–¶–µ–Ω–∞', ns)
                row_sum = row.find('cm:–°—É–º–º–∞', ns)
                row_discount_percent = row.find('cm:–ü—Ä–æ—Ü–µ–Ω—Ç–°–∫–∏–¥–∫–∏', ns)
                row_discount_sum = row.find('cm:–°—É–º–º–∞–°–∫–∏–¥–∫–∏', ns)
                row_vat_rate = row.find('cm:–°—Ç–∞–≤–∫–∞–ù–î–°', ns)
                row_vat_sum = row.find('cm:–°—É–º–º–∞–ù–î–°', ns)
                row_total = row.find('cm:–í—Å–µ–≥–æ', ns)
                
                print(f"  ID —Å—Ç—Ä–æ–∫–∏: {row_id.text if row_id is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"  –¢–æ–≤–∞—Ä: {row_product.text if row_product is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {row_quantity.text if row_quantity is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                print(f"  –¶–µ–Ω–∞: {row_price.text if row_price is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"  –°—É–º–º–∞: {row_sum.text if row_sum is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏: {row_discount_percent.text if row_discount_percent is not None else '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"  –°—É–º–º–∞ —Å–∫–∏–¥–∫–∏: {row_discount_sum.text if row_discount_sum is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"  –°—Ç–∞–≤–∫–∞ –ù–î–°: {row_vat_rate.text if row_vat_rate is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"  –°—É–º–º–∞ –ù–î–°: {row_vat_sum.text if row_vat_sum is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"  –í—Å–µ–≥–æ: {row_total.text if row_total is not None else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}")
                
                # –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—Ç—Ä–æ–∫–∏
                row_requisites = row.find('cm:–ó–Ω–∞—á–µ–Ω–∏—è–†–µ–∫–≤–∏–∑–∏—Ç–æ–≤', ns)
                if row_requisites is not None:
                    print("  –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å—Ç—Ä–æ–∫–∏:")
                    for req in row_requisites.findall('cm:–ó–Ω–∞—á–µ–Ω–∏–µ–†–µ–∫–≤–∏–∑–∏—Ç–∞', ns):
                        req_name = req.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
                        req_value = req.find('cm:–ó–Ω–∞—á–µ–Ω–∏–µ', ns)
                        if req_name is not None and req_value is not None:
                            print(f"    {req_name.text}: {req_value.text}")
        
        return extract_invoice_data(tree, ns)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def extract_invoice_data(tree, ns):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—á–µ—Ç–∞"""
    print("\n\nüìã –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ï –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:")
    print("=" * 70)
    
    data = {
        'invoice_info': {},
        'seller': {},
        'buyer': {},
        'items': []
    }
    
    try:
        doc = tree.find('.//cm:–î–æ–∫—É–º–µ–Ω—Ç', ns)
        if doc is not None:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ
            doc_number = doc.find('cm:–ù–æ–º–µ—Ä', ns)
            doc_date = doc.find('cm:–î–∞—Ç–∞', ns)
            doc_sum = doc.find('cm:–°—É–º–º–∞', ns)
            doc_comment = doc.find('cm:–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', ns)
            
            data['invoice_info'] = {
                'number': doc_number.text if doc_number is not None else None,
                'date': doc_date.text if doc_date is not None else None,
                'total_sum': doc_sum.text if doc_sum is not None else None,
                'comment': doc_comment.text if doc_comment is not None else None
            }
            
            # –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
            contractors = doc.findall('.//cm:–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç', ns)
            for contractor in contractors:
                role = contractor.find('cm:–†–æ–ª—å', ns)
                role_text = role.text if role is not None else ''
                
                contractor_data = {
                    'id': contractor.find('cm:–ò–¥', ns).text if contractor.find('cm:–ò–¥', ns) is not None else None,
                    'name': contractor.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns).text if contractor.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns) is not None else None,
                    'full_name': contractor.find('cm:–ü–æ–ª–Ω–æ–µ–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns).text if contractor.find('cm:–ü–æ–ª–Ω–æ–µ–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns) is not None else None,
                    'requisites': {}
                }
                
                # –†–µ–∫–≤–∏–∑–∏—Ç—ã
                requisites = contractor.find('cm:–†–µ–∫–≤–∏–∑–∏—Ç—ã', ns)
                if requisites is not None:
                    for req in requisites:
                        req_name = req.find('cm:–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ns)
                        req_value = req.find('cm:–ó–Ω–∞—á–µ–Ω–∏–µ', ns)
                        if req_name is not None and req_value is not None:
                            contractor_data['requisites'][req_name.text] = req_value.text
                
                if '–ü—Ä–æ–¥–∞–≤–µ—Ü' in role_text:
                    data['seller'] = contractor_data
                elif '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å' in role_text:
                    data['buyer'] = contractor_data
            
            # –¢–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—á–Ω–æ–π —á–∞—Å—Ç–∏
            table_part = doc.find('cm:–¢–∞–±–ª–∏—á–Ω–∞—è–ß–∞—Å—Ç—å', ns)
            if table_part is not None:
                rows = table_part.findall('cm:–°—Ç—Ä–æ–∫–∞–¢–∞–±–ª–∏—á–Ω–æ–π–ß–∞—Å—Ç–∏', ns)
                
                for row in rows:
                    item_data = {
                        'product_id': row.find('cm:–¢–æ–≤–∞—Ä', ns).text if row.find('cm:–¢–æ–≤–∞—Ä', ns) is not None else None,
                        'quantity': row.find('cm:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ns).text if row.find('cm:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', ns) is not None else None,
                        'price': row.find('cm:–¶–µ–Ω–∞', ns).text if row.find('cm:–¶–µ–Ω–∞', ns) is not None else None,
                        'sum': row.find('cm:–°—É–º–º–∞', ns).text if row.find('cm:–°—É–º–º–∞', ns) is not None else None,
                        'vat_rate': row.find('cm:–°—Ç–∞–≤–∫–∞–ù–î–°', ns).text if row.find('cm:–°—Ç–∞–≤–∫–∞–ù–î–°', ns) is not None else None,
                        'vat_sum': row.find('cm:–°—É–º–º–∞–ù–î–°', ns).text if row.find('cm:–°—É–º–º–∞–ù–î–°', ns) is not None else None,
                        'total': row.find('cm:–í—Å–µ–≥–æ', ns).text if row.find('cm:–í—Å–µ–≥–æ', ns) is not None else None
                    }
                    data['items'].append(item_data)
        
        # –í—ã–≤–æ–¥–∏–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç–µ:")
        for key, value in data['invoice_info'].items():
            print(f"  {key}: {value}")
        
        print("\nüè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü:")
        for key, value in data['seller'].items():
            if key == 'requisites':
                print(f"  {key}:")
                for req_name, req_value in value.items():
                    print(f"    {req_name}: {req_value}")
            else:
                print(f"  {key}: {value}")
        
        print("\nüè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:")
        for key, value in data['buyer'].items():
            if key == 'requisites':
                print(f"  {key}:")
                for req_name, req_value in value.items():
                    print(f"    {req_name}: {req_value}")
            else:
                print(f"  {key}: {value}")
        
        print(f"\nüì¶ –¢–æ–≤–∞—Ä—ã ({len(data['items'])} –ø–æ–∑–∏—Ü–∏–π):")
        for i, item in enumerate(data['items'], 1):
            print(f"  –ü–æ–∑–∏—Ü–∏—è {i}:")
            for key, value in item.items():
                print(f"    {key}: {value}")
        
        return data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return data

if __name__ == "__main__":
    analyze_commerceml_invoice()