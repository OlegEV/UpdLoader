#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å—á–µ—Ç–æ–≤ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
"""
import os
import sys
import tempfile
import zipfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, 'src')

from customer_invoice_parser import CustomerInvoiceParser, CustomerInvoiceParsingError

def create_test_archive():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞"""
    print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª
    temp_zip = tempfile.NamedTemporaryFile(suffix='.zip', delete=False)
    temp_zip.close()
    
    try:
        with zipfile.ZipFile(temp_zip.name, 'w') as zip_file:
            # –î–æ–±–∞–≤–ª—è–µ–º meta.xml
            meta_path = "Sample/Account/meta.xml"
            if os.path.exists(meta_path):
                zip_file.write(meta_path, "meta.xml")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: meta.xml")
            
            # –î–æ–±–∞–≤–ª—è–µ–º card.xml
            card_path = "Sample/Account/1/card.xml"
            if os.path.exists(card_path):
                zip_file.write(card_path, "1/card.xml")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: 1/card.xml")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π XML —Ñ–∞–π–ª —Å—á–µ—Ç–∞
            invoice_path = "Sample/Account/1/Schet na oplatu 239 27.06.2025 (30.06.2025 101328).xml"
            if os.path.exists(invoice_path):
                zip_file.write(invoice_path, "1/Schet na oplatu 239 27.06.2025 (30.06.2025 101328).xml")
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: –æ—Å–Ω–æ–≤–Ω–æ–π XML —Ñ–∞–π–ª —Å—á–µ—Ç–∞")
        
        print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {temp_zip.name}")
        return temp_zip.name
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: {e}")
        if os.path.exists(temp_zip.name):
            os.remove(temp_zip.name)
        return None

def test_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ï–†–ê –°–ß–ï–¢–û–í –ü–û–ö–£–ü–ê–¢–ï–õ–Æ")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤
    test_archive = create_test_archive()
    if not test_archive:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞—Ä—Ö–∏–≤")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = CustomerInvoiceParser()
        
        # –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç
        print("\nüîç –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        invoice_doc = parser.parse_customer_invoice_archive(test_archive)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
        print("-" * 40)
        
        print(f"üìÑ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {invoice_doc.invoice_number}")
        print(f"üìÖ –î–∞—Ç–∞ —Å—á–µ—Ç–∞: {invoice_doc.invoice_date.strftime('%d.%m.%Y')}")
        print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {invoice_doc.total_sum:,.2f} ‚ÇΩ")
        
        print(f"\nüè¢ –ü—Ä–æ–¥–∞–≤–µ—Ü:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {invoice_doc.seller.name}")
        print(f"   –ò–ù–ù: {invoice_doc.seller.inn}")
        print(f"   –ö–ü–ü: {invoice_doc.seller.kpp or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        
        print(f"\nüè™ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {invoice_doc.buyer.name}")
        print(f"   –ò–ù–ù: {invoice_doc.buyer.inn}")
        print(f"   –ö–ü–ü: {invoice_doc.buyer.kpp or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        
        print(f"\nüì¶ –¢–æ–≤–∞—Ä—ã ({len(invoice_doc.items)} –ø–æ–∑–∏—Ü–∏–π):")
        for i, item in enumerate(invoice_doc.items, 1):
            print(f"   {i}. {item.name}")
            print(f"      –ê—Ä—Ç–∏–∫—É–ª: {item.article or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}")
            print(f"      –¶–µ–Ω–∞: {item.price:,.2f} ‚ÇΩ")
            print(f"      –°—É–º–º–∞: {item.amount_with_vat:,.2f} ‚ÇΩ")
            print(f"      –ù–î–°: {item.vat_rate or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        print(f"\nüéØ –î–ê–ù–ù–´–ï –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ó–ê–ö–ê–ó–ê –ü–û–ö–£–ü–ê–¢–ï–õ–Ø:")
        print("-" * 50)
        
        order_number = f"–ü{invoice_doc.invoice_number}"
        print(f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}")
        print(f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {invoice_doc.invoice_date.strftime('%d.%m.%Y')}")
        
        print(f"\nüì¶ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞:")
        for item in invoice_doc.items:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É/–Ω–∞–∑–≤–∞–Ω–∏—é
            group = determine_product_group(item)
            warehouse, project = get_warehouse_and_project(group)
            
            print(f"   ‚Ä¢ {item.name}")
            print(f"     –ê—Ä—Ç–∏–∫—É–ª: {item.article or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"     –ì—Ä—É–ø–ø–∞: {group}")
            print(f"     –°–∫–ª–∞–¥: {warehouse}")
            print(f"     –ü—Ä–æ–µ–∫—Ç: {project}")
            print(f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}")
            print(f"     –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {item.name} - {item.quantity} —à—Ç")
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return invoice_doc
        
    except CustomerInvoiceParsingError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None
    finally:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(test_archive):
            os.remove(test_archive)
            print(f"\nüßπ –í—Ä–µ–º–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤ —É–¥–∞–ª–µ–Ω")

def determine_product_group(item):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Ç–æ–≤–∞—Ä–∞"""
    name_lower = item.name.lower()
    article_lower = (item.article or '').lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ç—Ä—É–±
    tube_keywords = ['—Ç—Ä—É–±–∞', '—Ç—Ä—É–±—ã', 'pipe', 'tube']
    for keyword in tube_keywords:
        if keyword in name_lower or keyword in article_lower:
            return '—Ç—Ä—É–±—ã'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
    profile_keywords = ['–ø—Ä–æ—Ñ–∏–ª—å', '–ø—Ä–æ—Ñ–∏–ª–∏', 'profile']
    for keyword in profile_keywords:
        if keyword in name_lower or keyword in article_lower:
            return '–ø—Ä–æ—Ñ–∏–ª—å'
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'

def get_warehouse_and_project(group):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–µ —Ç–æ–≤–∞—Ä–∞"""
    if group == '–ø—Ä–æ—Ñ–∏–ª—å':
        return '–ì–∞—Ç—á–∏–Ω–∞', '–ü—Ä–æ—Ñ–∏–ª–∏'
    elif group == '—Ç—Ä—É–±—ã':
        return '–°–µ—Å—Ç—Ä–æ—Ä–µ—Ü–∫ –ü–ü', '–¢—Ä—É–±—ã'
    else:
        return '–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫–ª–∞–¥', '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç'

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "Sample/Account/meta.xml",
        "Sample/Account/1/card.xml",
        "Sample/Account/1/Schet na oplatu 239 27.06.2025 (30.06.2025 101328).xml"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_parser()